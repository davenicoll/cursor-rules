---
description: APPLY Clean Architecture principles WHEN organizing code TO ensure separation of concerns and testability
globs: src/**, internal/**, backend/**
alwaysApply: false
---

# Clean Architecture Standards

<version>2.1.0</version>

## Context
- These rules apply to the overall architecture of applications
- They ensure proper separation of concerns and dependency inversion
- They promote testability and maintainability through clear layer boundaries
- Backend follows Clean Architecture with Interface Adapters pattern
- Frontend follows Feature-based Architecture principles

## Requirements

### Layer Organization
- MUST separate code into four distinct layers: Domain, Application, Adapters, and Presentation
- MUST ensure dependencies point inward: Presentation → Application → Domain
- MUST implement interfaces defined in inner layers (Dependency Inversion)
- MUST use dependency injection to wire implementations

### Domain Layer
- MUST define pure business entities and value objects
- MUST implement business rules and validation logic
- MUST define interfaces consumed by this layer (Repository, Service interfaces)
- MUST keep domain models framework-independent (no serialization tags, no external dependencies)
- MUST validate business constraints and invariants

### Application Layer
- MUST implement use cases that orchestrate domain logic
- MUST keep application services focused on single responsibility
- MUST use dependency injection container for managing dependencies
- MUST handle cross-cutting concerns: transactions, logging, error handling
- MUST convert between domain objects and DTOs when necessary

### Adapters Layer
- MUST implement interfaces defined in inner layers
- MUST convert data between domain format and external system format
- MUST organize by adapter type:
  - Persistence: Database, file system implementations
  - External: External API clients, message queues
  - UI: User interface implementations
  - Messaging: Event publishers, message handlers
- MUST keep adapter logic focused on translation, not business logic

### Presentation Layer
- MUST handle framework integration: HTTP routers, CLI frameworks, gRPC servers
- MUST parse and validate input from external sources
- MUST convert between presentation DTOs and application layer calls
- MUST implement error handling and response formatting
- MUST keep presentation logic separate from business logic

## Frontend Architecture (Feature-based)

### Feature Organization
- MUST organize code by business features, not technical layers
- MUST contain components, hooks, services, and types within each feature
- MUST place shared code in common directories: components, hooks, utils
- MUST keep feature boundaries clear and minimize cross-feature dependencies

## Examples

<example>
// Domain Layer - Pure business logic
type User struct {
    ID    UserID
    Email string
    Name  string
}

func (u *User) ValidateEmail() error {
    if u.Email == "" {
        return fmt.Errorf("email cannot be empty")
    }
    // Business validation logic
    return nil
}

// Interface defined by consumer (domain layer)
type UserRepository interface {
    Save(user *User) error
    FindByID(id UserID) (*User, error)
}
</example>

<example>
// Adapters Layer - Interface implementation
type PostgresUserRepository struct {
    db Database
}

func (r *PostgresUserRepository) Save(user *domain.User) error {
    // Convert Domain → Database format
    userDTO := UserDTO{
        ID:    user.ID.String(),
        Email: user.Email,
        Name:  user.Name,
    }
    return r.insertUser(userDTO)
}
</example>

<example type="invalid">
// INVALID - Domain depending on external framework
type User struct {
    ID    int    `db:"id"`    // Database concern in domain
    Email string `db:"email"`
    Name  string `db:"name"`
}
</example>

<example type="invalid">
// INVALID - Business logic in adapter
func (r *PostgresUserRepository) Save(user *domain.User) error {
    // Adapter performing business validation (MUST be in domain)
    if user.Email == "" {
        return fmt.Errorf("email required")
    }
    return r.insertUser(user)
}
</example>

## Critical Rules

<critical>
- NEVER allow outer layers to depend on inner layers (dependency rule)
- ALWAYS define interfaces in the consuming layer, not the implementing layer
- NEVER mix business logic with external system concerns
- ALWAYS use dependency injection to wire interface implementations
- NEVER import external frameworks in domain layer
- ALWAYS validate business rules in domain layer, syntax in adapters
- NEVER put serialization tags on domain models
- ALWAYS organize adapters by their external system type
- NEVER allow adapters to contain business logic
- ALWAYS keep configuration separate from domain models using DTOs
</critical>
